//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""ControllerActions"",
            ""id"": ""dab94763-c8fa-4f82-bd94-235b05ce4cd4"",
            ""actions"": [
                {
                    ""name"": ""LeftStick"",
                    ""type"": ""Value"",
                    ""id"": ""8e87025a-dc5e-4eb5-96d7-83fe004ee0d0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStick"",
                    ""type"": ""Value"",
                    ""id"": ""5bb7b7b7-f9a9-4be0-962c-c6d84fd8585d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SouthButton"",
                    ""type"": ""Button"",
                    ""id"": ""6c3448d7-d689-4b94-b832-968a1ba9cf8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""414a41f7-b5fc-4a94-9e29-f0f5946f2984"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""c7ea9b4e-5fb2-49a1-bb2d-f58a642555ff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c8c39c28-2e27-4ca8-96f7-77bbf1f71e00"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ca915f86-fb51-410f-b3c7-cb945edfa56b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""419a33f0-4f4d-4403-8686-5f360c2e492a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0a75ad0e-db48-4d9a-b6e6-20941b122ff7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""21226b1c-aca5-4749-bd43-8dac931d9f08"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""78fdb491-4e88-42d6-a1ef-a9f82869f33a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""84df23d2-e49e-4a04-8bf3-5852b9b92561"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b2e517fa-b9aa-4179-be31-29190a35c79b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9edf8f44-f6b2-476e-9679-c96471205849"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""095db455-1fe8-4181-b773-21ceb6e3361e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7946b07d-bca8-49aa-9056-d62c2b392004"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SouthButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aed99cec-9f41-4920-966d-1eb67dcd9fc7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SouthButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TouchActions"",
            ""id"": ""5564c3f7-f7ea-40c4-8c8b-086108b69d85"",
            ""actions"": [
                {
                    ""name"": ""TapTouch"",
                    ""type"": ""Button"",
                    ""id"": ""d2a6c6ac-45b1-47ef-ae9e-9b40f4a32d65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldTouch"",
                    ""type"": ""Button"",
                    ""id"": ""a19c2881-2c26-4ccf-875c-70e3552b41ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""83f7b147-fa26-4d7d-aa37-4c547f47d3f4"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInput"",
                    ""action"": ""TapTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fde7de4-742f-45ce-9227-864bbefb3d84"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.3)"",
                    ""processors"": """",
                    ""groups"": ""PlayerInput"",
                    ""action"": ""HoldTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerInput"",
            ""bindingGroup"": ""PlayerInput"",
            ""devices"": []
        }
    ]
}");
        // ControllerActions
        m_ControllerActions = asset.FindActionMap("ControllerActions", throwIfNotFound: true);
        m_ControllerActions_LeftStick = m_ControllerActions.FindAction("LeftStick", throwIfNotFound: true);
        m_ControllerActions_RightStick = m_ControllerActions.FindAction("RightStick", throwIfNotFound: true);
        m_ControllerActions_SouthButton = m_ControllerActions.FindAction("SouthButton", throwIfNotFound: true);
        // TouchActions
        m_TouchActions = asset.FindActionMap("TouchActions", throwIfNotFound: true);
        m_TouchActions_TapTouch = m_TouchActions.FindAction("TapTouch", throwIfNotFound: true);
        m_TouchActions_HoldTouch = m_TouchActions.FindAction("HoldTouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControllerActions
    private readonly InputActionMap m_ControllerActions;
    private IControllerActionsActions m_ControllerActionsActionsCallbackInterface;
    private readonly InputAction m_ControllerActions_LeftStick;
    private readonly InputAction m_ControllerActions_RightStick;
    private readonly InputAction m_ControllerActions_SouthButton;
    public struct ControllerActionsActions
    {
        private @PlayerInput m_Wrapper;
        public ControllerActionsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftStick => m_Wrapper.m_ControllerActions_LeftStick;
        public InputAction @RightStick => m_Wrapper.m_ControllerActions_RightStick;
        public InputAction @SouthButton => m_Wrapper.m_ControllerActions_SouthButton;
        public InputActionMap Get() { return m_Wrapper.m_ControllerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IControllerActionsActions instance)
        {
            if (m_Wrapper.m_ControllerActionsActionsCallbackInterface != null)
            {
                @LeftStick.started -= m_Wrapper.m_ControllerActionsActionsCallbackInterface.OnLeftStick;
                @LeftStick.performed -= m_Wrapper.m_ControllerActionsActionsCallbackInterface.OnLeftStick;
                @LeftStick.canceled -= m_Wrapper.m_ControllerActionsActionsCallbackInterface.OnLeftStick;
                @RightStick.started -= m_Wrapper.m_ControllerActionsActionsCallbackInterface.OnRightStick;
                @RightStick.performed -= m_Wrapper.m_ControllerActionsActionsCallbackInterface.OnRightStick;
                @RightStick.canceled -= m_Wrapper.m_ControllerActionsActionsCallbackInterface.OnRightStick;
                @SouthButton.started -= m_Wrapper.m_ControllerActionsActionsCallbackInterface.OnSouthButton;
                @SouthButton.performed -= m_Wrapper.m_ControllerActionsActionsCallbackInterface.OnSouthButton;
                @SouthButton.canceled -= m_Wrapper.m_ControllerActionsActionsCallbackInterface.OnSouthButton;
            }
            m_Wrapper.m_ControllerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftStick.started += instance.OnLeftStick;
                @LeftStick.performed += instance.OnLeftStick;
                @LeftStick.canceled += instance.OnLeftStick;
                @RightStick.started += instance.OnRightStick;
                @RightStick.performed += instance.OnRightStick;
                @RightStick.canceled += instance.OnRightStick;
                @SouthButton.started += instance.OnSouthButton;
                @SouthButton.performed += instance.OnSouthButton;
                @SouthButton.canceled += instance.OnSouthButton;
            }
        }
    }
    public ControllerActionsActions @ControllerActions => new ControllerActionsActions(this);

    // TouchActions
    private readonly InputActionMap m_TouchActions;
    private ITouchActionsActions m_TouchActionsActionsCallbackInterface;
    private readonly InputAction m_TouchActions_TapTouch;
    private readonly InputAction m_TouchActions_HoldTouch;
    public struct TouchActionsActions
    {
        private @PlayerInput m_Wrapper;
        public TouchActionsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapTouch => m_Wrapper.m_TouchActions_TapTouch;
        public InputAction @HoldTouch => m_Wrapper.m_TouchActions_HoldTouch;
        public InputActionMap Get() { return m_Wrapper.m_TouchActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActionsActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActionsActions instance)
        {
            if (m_Wrapper.m_TouchActionsActionsCallbackInterface != null)
            {
                @TapTouch.started -= m_Wrapper.m_TouchActionsActionsCallbackInterface.OnTapTouch;
                @TapTouch.performed -= m_Wrapper.m_TouchActionsActionsCallbackInterface.OnTapTouch;
                @TapTouch.canceled -= m_Wrapper.m_TouchActionsActionsCallbackInterface.OnTapTouch;
                @HoldTouch.started -= m_Wrapper.m_TouchActionsActionsCallbackInterface.OnHoldTouch;
                @HoldTouch.performed -= m_Wrapper.m_TouchActionsActionsCallbackInterface.OnHoldTouch;
                @HoldTouch.canceled -= m_Wrapper.m_TouchActionsActionsCallbackInterface.OnHoldTouch;
            }
            m_Wrapper.m_TouchActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TapTouch.started += instance.OnTapTouch;
                @TapTouch.performed += instance.OnTapTouch;
                @TapTouch.canceled += instance.OnTapTouch;
                @HoldTouch.started += instance.OnHoldTouch;
                @HoldTouch.performed += instance.OnHoldTouch;
                @HoldTouch.canceled += instance.OnHoldTouch;
            }
        }
    }
    public TouchActionsActions @TouchActions => new TouchActionsActions(this);
    private int m_PlayerInputSchemeIndex = -1;
    public InputControlScheme PlayerInputScheme
    {
        get
        {
            if (m_PlayerInputSchemeIndex == -1) m_PlayerInputSchemeIndex = asset.FindControlSchemeIndex("PlayerInput");
            return asset.controlSchemes[m_PlayerInputSchemeIndex];
        }
    }
    public interface IControllerActionsActions
    {
        void OnLeftStick(InputAction.CallbackContext context);
        void OnRightStick(InputAction.CallbackContext context);
        void OnSouthButton(InputAction.CallbackContext context);
    }
    public interface ITouchActionsActions
    {
        void OnTapTouch(InputAction.CallbackContext context);
        void OnHoldTouch(InputAction.CallbackContext context);
    }
}
